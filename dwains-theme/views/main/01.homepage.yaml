# dwains_theme

- title: {{ _d_t_trans.home.title }}
  icon: {{ _d_t_icons.menu_home|default('mdi:home') }}
  path: home
  panel: true
  cards:    
    - type: custom:mod-card
      style: | 
        layout-card {
          padding-left: 0px;
          padding-right: 0px;
        }
      card:
        type: custom:layout-card
        column_width: 1465px
        cards:
          #START HOMEPAGE HEADER
          - type: custom:mod-card
            style: |
              ha-card {
                padding: 4px 4px 4px 4px;
                background-color: var(--dwains-theme-header-background);
                --ha-card-background: transparent;
                margin: -4px;
                border-radius: 0;
              } 
              @media only screen and (min-width: 600px) {
                ha-card {
                  padding-top: 15px;
                  padding-bottom: 15px;
                }
              }
            card:
              type: custom:layout-card
              column_width: [360, 800]
              layout: horizontal
              justify_content: start
              cards:
                - type: custom:button-card
                  template: header_greeting
                  {% if _d_t_config.global["alarm"] %}
                  entity: {{ _d_t_config.global["alarm"] }}
                  show_label: true
                  show_icon: true
                  tap_action:
                    !include 
                      - ../popups/alarm.yaml
                      - entity: {{ _d_t_config.global["alarm"] }}
                  {% endif %}  
                - type: custom:mod-card
                  style: | 
                    layout-card {
                      padding-left: 0px;
                      padding-right: 0px;
                      margin-left: -8px;
                      margin-right: -8px;
                    }
                  card:
                    type: custom:layout-card
                    column_width: 182px
                    layout: horizontal
                    justify_content: start
                    cards:      
                      {% if _d_t_config.rooms %}
                      - type: custom:button-card
                        template: header_house_information
                      {% endif %}
                      {% if _d_t_config.global["weather"] %}
                      - type: custom:button-card
                        template: header_weather
                      {% endif %}
                      {% if _d_t_config.persons %}
                      {% for person in _d_t_config.persons %}
                      - type: custom:button-card
                        template: header_person
                        entity: {{ person["track"] }}
                        {% if person["picture_path"] %}
                        entity_picture: '/local/{{ person["picture_path"] }}'
                        {% else %}
                        entity_picture: 'https://avatars.dicebear.com/v2/initials/{{ person["name"] }}.svg'
                        {% endif %}
                        name: {{ person["name"] }}
                        tap_action: 
                          action: navigate
                          navigation_path: {{ person["name"]|lower|replace("'", "_")|replace(" ", "_")  }}
                      {% endfor %}
                      {% endif %}
          #END HOMEPAGE HEADER

          #START HOMEPAGE CONTENT
          - type: custom:state-switch
            entity: hash
            default: rooms
            states:
              #ROOMS VIEW
              rooms:
                type: vertical-stack
                cards:
                  #heading  
                  - !include
                    - ../partials/heading_switch.yaml
                    - button_template: partials_heading_switch
                      active: Rooms
                      headings:
                        - name: Rooms
                          navigation_path: "#rooms"
                        - name: Devices
                          navigation_path: "#devices"
                  - type: custom:mod-card
                    style: |
                      ha-card {
                        padding-bottom: 20px;
                      }
                    card:
                      type: custom:layout-card
                      column_width: 180px
                      layout: horizontal
                      justify_content: start
                      cards:
                        {% for room in _d_t_config.rooms %}
                        - type: custom:button-card
                          template: homepage_room
                          {% if room["light"] %}
                          entity: {{ room["light"] }}
                          {% endif %}
                          name: {{ room["name"] }}
                          {% if room["show_name"] == 'false' %}
                          show_name: false
                          {% endif %}
                          {% if room["climate"] or room["temperature"] %}
                          label: >
                            [[[ 
                              var humidity = '';
                              {% if room["humidity"] %}
                                if(states['{{ room["humidity"] }}'] && states['{{ room["humidity"] }}'].state != 'unavailable'){
                                  humidity = ' / '+ (Math.round(states['{{ room["humidity"] }}'].state * 10) / 10) + '%';
                                }
                              {% endif %}

                              {% if room["temperature"] %}
                                if(states['{{ room["temperature"] }}']){
                                  var icon = '';

                                  {% if room["climate"] %}
                                  if(states['{{ room["climate"] }}']){
                                    if(states['{{ room["climate"] }}'].attributes['hvac_action'] == 'heating' || states['{{ room["climate"] }}'].attributes['hvac_action'] == 'heat'){
                                      icon = '<ha-icon style="height: 15px;" icon="{{ _d_t_icons.climate_heating|default('mdi:radiator') }}"></ha-icon>'
                                    } else if(states['{{ room["climate"] }}'].attributes['hvac_action'] == 'cool' || states['{{ room["climate"] }}'].attributes['hvac_action'] == 'cooling'){
                                      icon = '<ha-icon style="height: 15px;" icon="{{ _d_t_icons.climate_cool|default('hass:snowflake') }}"></ha-icon>'
                                    }
                                  }
                                  {% endif %}

                                  return (Math.round(states['{{ room["temperature"] }}'].state * 10) / 10) + '°' + icon + humidity;
                                } else {
                                  console.log("Dwains Theme Error: Invalid rooms.yaml:{{ room["name"] }}.temperature entity!");
                                  return 'Temperature error';
                                }
                              {% elif room["climate"] %}
                                if(states['{{ room["climate"] }}']){
                                  var icon = '';

                                  if(states['{{ room["climate"] }}']){
                                    if(states['{{ room["climate"] }}'].attributes['hvac_action'] == 'heating' || states['{{ room["climate"] }}'].attributes['hvac_action'] == 'heat'){
                                      icon = '<ha-icon style="height: 15px;" icon="{{ _d_t_icons.climate_heating|default('mdi:radiator') }}"></ha-icon>'
                                    }
                                  }

                                  return (Math.round(states['{{ room["climate"] }}'].attributes.current_temperature * 10) / 10) + '°' + icon + humidity;
                                } else {
                                  console.log("Dwains Theme Error: Invalid rooms.yaml:{{ room["name"] }}.climate entity!");
                                  return 'Climate error';
                                }
                              {% endif %}
                            ]]] 
                          {% else %}
                          label: '&nbsp;'
                          {% endif %}
                          icon: '{{ room["icon"]|default('mdi:square-outline') }}'
                          tap_action: 
                            action: navigate
                            navigation_path: {{ room["name"]|lower|replace("'", "_")|replace(" ", "_")  }}
                          custom_fields:
                            additional_info: >
                              [[[
                                var additional_info = '';
                                {% if room["window"] %}
                                  if(states['{{ room["window"] }}']){
                                    {% if room["window"].split('.')[0] == 'binary_sensor' or room["window"].split('.')[0] == 'sensor' %}
                                      if(states['{{ room["window"] }}'].state == 'on' || states['{{ room["window"] }}'].state == 'True'){
                                        additional_info += '<ha-icon style="height: 20px; color: var(--dwains-theme-accent)" icon="{{ _d_t_icons.window_open|default('mdi:window-open-variant') }}"></ha-icon><br>';
                                      }
                                    {% else %}
                                      const entitiesFromGroup = states['{{ room["window"] }}'].attributes['entity_id'];
                                      for (let i = 0; i < entitiesFromGroup.length; i++) {
                                        if(states[entitiesFromGroup[i]] && states[entitiesFromGroup[i]].state == 'on' || 
                                            states[entitiesFromGroup[i]] && states[entitiesFromGroup[i]].state == 'True') {
                                          additional_info += '<ha-icon style="height: 20px; color: var(--dwains-theme-accent)" icon="{{ _d_t_icons.window_open|default('mdi:window-open-variant') }}"></ha-icon><br>';
                                          break;
                                        }
                                      }  
                                    {% endif %}
                                  } else {
                                    console.log("Dwains Theme Error: Invalid rooms.yaml:{{ room["name"] }}.window entity!");
                                    additional_info += 'W-E!<br>';
                                  }
                                {% endif %}
                                {% if room["motion"] %}
                                  if(states['{{ room["motion"] }}']){
                                    {% if room["motion"].split('.')[0] == 'binary_sensor' or room["motion"].split('.')[0] == 'sensor' %}
                                      if(states['{{ room["motion"] }}'].state == 'on' || states['{{ room["motion"] }}'].state == 'True'){
                                        additional_info += '<ha-icon style="height: 20px; color: var(--dwains-theme-accent)" icon="{{ _d_t_icons.motion_on|default('mdi:motion-sensor') }}"></ha-icon><br>';
                                      }
                                    {% else %}
                                      const entitiesFromGroup = states['{{ room["motion"] }}'].attributes['entity_id'];
                                      for (let i = 0; i < entitiesFromGroup.length; i++) {
                                        if(states[entitiesFromGroup[i]] && states[entitiesFromGroup[i]].state == 'on' ||
                                            states[entitiesFromGroup[i]] && states[entitiesFromGroup[i]].state == 'True') {
                                          additional_info += '<ha-icon style="height: 20px; color: var(--dwains-theme-accent)" icon="{{ _d_t_icons.motion_on|default('mdi:motion-sensor') }}"></ha-icon><br>';
                                          break;
                                        }
                                      }  
                                    {% endif %}
                                  } else {
                                    console.log("Dwains Theme Error: Invalid rooms.yaml:{{ room["name"] }}.motion entity!");
                                    additional_info += 'M-E!<br>';
                                  }
                                {% endif %}
                                {% if room["door"] %}
                                  if(states['{{ room["door"] }}']){
                                    {% if room["door"].split('.')[0] == 'binary_sensor' or room["door"].split('.')[0] == 'sensor' %}
                                      if(states['{{ room["door"] }}'].state == 'on' || states['{{ room["door"] }}'].state == 'True'){
                                        additional_info += '<ha-icon style="height: 20px; color: var(--dwains-theme-accent)" icon="{{ _d_t_icons.door_open|default('fas:door-open') }}"></ha-icon><br>';
                                      }
                                    {% else %}
                                      const entitiesFromGroup = states['{{ room["door"] }}'].attributes['entity_id'];
                                      for (let i = 0; i < entitiesFromGroup.length; i++) {
                                        if(states[entitiesFromGroup[i]] && states[entitiesFromGroup[i]].state == 'on' ||
                                            states[entitiesFromGroup[i]] && states[entitiesFromGroup[i]].state == 'True') {
                                          additional_info += '<ha-icon style="height: 20px; color: var(--dwains-theme-accent)" icon="{{ _d_t_icons.door_open|default('fas:door-open') }}"></ha-icon><br>';
                                          break;
                                        }
                                      }  
                                    {% endif %}
                                  } else {
                                    console.log("Dwains Theme Error: Invalid rooms.yaml:{{ room["name"] }}.door entity!");
                                    additional_info += 'D-E!<br>';
                                  }
                                {% endif %}
                                return additional_info;
                              ]]]
                            {% if room["light"] %}
                            lights: > 
                              [[[
                                if(entity){
                                  if (entity.state == 'on'){
                                    return `<ha-icon
                                      style="height: 20px; color: var(--dwains-theme-accent)"
                                      icon="{{ _d_t_icons.light_on|default('fas:lightbulb') }}">
                                      </ha-icon>`
                                  } else {
                                    return `<ha-icon
                                      style="height: 20px;"
                                      icon="{{ _d_t_icons.light_on|default('far:lightbulb') }}">
                                      </ha-icon>`
                                  }
                                } else {
                                  console.log("Dwains Theme Error: Invalid rooms.yaml:{{ room["name"] }}.light entity!");
                                  return 'L-E!<br>';
                                }
                              ]]]   
                            {% endif %}
                        {% else %}
                        - type: markdown
                          content: No rooms defined
                        {% endfor %}
                        - type: custom:button-card
                          color_type: blank-card
                          aspect_ratio: 1/1

              #DEVICES VIEW
              devices:
                type: vertical-stack
                cards:
                  #heading  
                  - !include
                    - ../partials/heading_switch.yaml
                    - button_template: partials_heading_switch
                      active: Devices
                      headings:
                        - name: Rooms
                          navigation_path: "#rooms"
                        - name: Devices
                          navigation_path: "#devices"
                  - type: custom:mod-card
                    style: |
                      ha-card {
                        padding-bottom: 20px;
                      }
                    card:
                      type: custom:layout-card
                      column_width: 180px
                      layout: horizontal
                      justify_content: start
                      cards:
                        {% for room in _d_t_config.rooms %}
                        - type: custom:button-card
                          template: homepage_room
                          {% if room["light"] %}
                          entity: {{ room["light"] }}
                          {% endif %}
                          name: {{ room["name"] }}
                          {% if room["show_name"] == 'false' %}
                          show_name: false
                          {% endif %}
                          {% if room["climate"] or room["temperature"] %}
                          label: >
                            [[[ 
                              var humidity = '';
                              {% if room["humidity"] %}
                                if(states['{{ room["humidity"] }}'] && states['{{ room["humidity"] }}'].state != 'unavailable'){
                                  humidity = ' / '+ (Math.round(states['{{ room["humidity"] }}'].state * 10) / 10) + '%';
                                }
                              {% endif %}

                              {% if room["temperature"] %}
                                if(states['{{ room["temperature"] }}']){
                                  var icon = '';

                                  {% if room["climate"] %}
                                  if(states['{{ room["climate"] }}']){
                                    if(states['{{ room["climate"] }}'].attributes['hvac_action'] == 'heating' || states['{{ room["climate"] }}'].attributes['hvac_action'] == 'heat'){
                                      icon = '<ha-icon style="height: 15px;" icon="{{ _d_t_icons.climate_heating|default('mdi:radiator') }}"></ha-icon>'
                                    } else if(states['{{ room["climate"] }}'].attributes['hvac_action'] == 'cool' || states['{{ room["climate"] }}'].attributes['hvac_action'] == 'cooling'){
                                      icon = '<ha-icon style="height: 15px;" icon="{{ _d_t_icons.climate_cool|default('hass:snowflake') }}"></ha-icon>'
                                    }
                                  }
                                  {% endif %}

                                  return (Math.round(states['{{ room["temperature"] }}'].state * 10) / 10) + '°' + icon + humidity;
                                } else {
                                  console.log("Dwains Theme Error: Invalid rooms.yaml:{{ room["name"] }}.temperature entity!");
                                  return 'Temperature error';
                                }
                              {% elif room["climate"] %}
                                if(states['{{ room["climate"] }}']){
                                  var icon = '';

                                  if(states['{{ room["climate"] }}']){
                                    if(states['{{ room["climate"] }}'].attributes['hvac_action'] == 'heating' || states['{{ room["climate"] }}'].attributes['hvac_action'] == 'heat'){
                                      icon = '<ha-icon style="height: 15px;" icon="{{ _d_t_icons.climate_heating|default('mdi:radiator') }}"></ha-icon>'
                                    }
                                  }

                                  return (Math.round(states['{{ room["climate"] }}'].attributes.current_temperature * 10) / 10) + '°' + icon + humidity;
                                } else {
                                  console.log("Dwains Theme Error: Invalid rooms.yaml:{{ room["name"] }}.climate entity!");
                                  return 'Climate error';
                                }
                              {% endif %}
                            ]]] 
                          {% else %}
                          label: '&nbsp;'
                          {% endif %}
                          icon: '{{ room["icon"]|default('mdi:square-outline') }}'
                          tap_action: 
                            action: navigate
                            navigation_path: {{ room["name"]|lower|replace("'", "_")|replace(" ", "_")  }}
                          custom_fields:
                            additional_info: >
                              [[[
                                var additional_info = '';
                                {% if room["window"] %}
                                  if(states['{{ room["window"] }}']){
                                    {% if room["window"].split('.')[0] == 'binary_sensor' or room["window"].split('.')[0] == 'sensor' %}
                                      if(states['{{ room["window"] }}'].state == 'on' || states['{{ room["window"] }}'].state == 'True'){
                                        additional_info += '<ha-icon style="height: 20px; color: var(--dwains-theme-accent)" icon="{{ _d_t_icons.window_open|default('mdi:window-open-variant') }}"></ha-icon><br>';
                                      }
                                    {% else %}
                                      const entitiesFromGroup = states['{{ room["window"] }}'].attributes['entity_id'];
                                      for (let i = 0; i < entitiesFromGroup.length; i++) {
                                        if(states[entitiesFromGroup[i]] && states[entitiesFromGroup[i]].state == 'on' || 
                                            states[entitiesFromGroup[i]] && states[entitiesFromGroup[i]].state == 'True') {
                                          additional_info += '<ha-icon style="height: 20px; color: var(--dwains-theme-accent)" icon="{{ _d_t_icons.window_open|default('mdi:window-open-variant') }}"></ha-icon><br>';
                                          break;
                                        }
                                      }  
                                    {% endif %}
                                  } else {
                                    console.log("Dwains Theme Error: Invalid rooms.yaml:{{ room["name"] }}.window entity!");
                                    additional_info += 'W-E!<br>';
                                  }
                                {% endif %}
                                {% if room["motion"] %}
                                  if(states['{{ room["motion"] }}']){
                                    {% if room["motion"].split('.')[0] == 'binary_sensor' or room["motion"].split('.')[0] == 'sensor' %}
                                      if(states['{{ room["motion"] }}'].state == 'on' || states['{{ room["motion"] }}'].state == 'True'){
                                        additional_info += '<ha-icon style="height: 20px; color: var(--dwains-theme-accent)" icon="{{ _d_t_icons.motion_on|default('mdi:motion-sensor') }}"></ha-icon><br>';
                                      }
                                    {% else %}
                                      const entitiesFromGroup = states['{{ room["motion"] }}'].attributes['entity_id'];
                                      for (let i = 0; i < entitiesFromGroup.length; i++) {
                                        if(states[entitiesFromGroup[i]] && states[entitiesFromGroup[i]].state == 'on' ||
                                            states[entitiesFromGroup[i]] && states[entitiesFromGroup[i]].state == 'True') {
                                          additional_info += '<ha-icon style="height: 20px; color: var(--dwains-theme-accent)" icon="{{ _d_t_icons.motion_on|default('mdi:motion-sensor') }}"></ha-icon><br>';
                                          break;
                                        }
                                      }  
                                    {% endif %}
                                  } else {
                                    console.log("Dwains Theme Error: Invalid rooms.yaml:{{ room["name"] }}.motion entity!");
                                    additional_info += 'M-E!<br>';
                                  }
                                {% endif %}
                                {% if room["door"] %}
                                  if(states['{{ room["door"] }}']){
                                    {% if room["door"].split('.')[0] == 'binary_sensor' or room["door"].split('.')[0] == 'sensor' %}
                                      if(states['{{ room["door"] }}'].state == 'on' || states['{{ room["door"] }}'].state == 'True'){
                                        additional_info += '<ha-icon style="height: 20px; color: var(--dwains-theme-accent)" icon="{{ _d_t_icons.door_open|default('fas:door-open') }}"></ha-icon><br>';
                                      }
                                    {% else %}
                                      const entitiesFromGroup = states['{{ room["door"] }}'].attributes['entity_id'];
                                      for (let i = 0; i < entitiesFromGroup.length; i++) {
                                        if(states[entitiesFromGroup[i]] && states[entitiesFromGroup[i]].state == 'on' ||
                                            states[entitiesFromGroup[i]] && states[entitiesFromGroup[i]].state == 'True') {
                                          additional_info += '<ha-icon style="height: 20px; color: var(--dwains-theme-accent)" icon="{{ _d_t_icons.door_open|default('fas:door-open') }}"></ha-icon><br>';
                                          break;
                                        }
                                      }  
                                    {% endif %}
                                  } else {
                                    console.log("Dwains Theme Error: Invalid rooms.yaml:{{ room["name"] }}.door entity!");
                                    additional_info += 'D-E!<br>';
                                  }
                                {% endif %}
                                return additional_info;
                              ]]]
                            {% if room["light"] %}
                            lights: > 
                              [[[
                                if(entity){
                                  if (entity.state == 'on'){
                                    return `<ha-icon
                                      style="height: 20px; color: var(--dwains-theme-accent)"
                                      icon="{{ _d_t_icons.light_on|default('fas:lightbulb') }}">
                                      </ha-icon>`
                                  } else {
                                    return `<ha-icon
                                      style="height: 20px;"
                                      icon="{{ _d_t_icons.light_on|default('far:lightbulb') }}">
                                      </ha-icon>`
                                  }
                                } else {
                                  console.log("Dwains Theme Error: Invalid rooms.yaml:{{ room["name"] }}.light entity!");
                                  return 'L-E!<br>';
                                }
                              ]]]   
                            {% endif %}
                        {% else %}
                        - type: markdown
                          content: No rooms defined
                        {% endfor %}
                        - type: custom:button-card
                          color_type: blank-card
                          aspect_ratio: 1/1